{"config": {"lang": ["en"], "separator": "[\\s\\-]+", "pipeline": ["stopWordFilter"]}, "docs": [{"location": "", "title": "Home", "text": ""}, {"location": "#devops-jeremy", "title": "DevOps Jeremy", "text": "<p>Random thoughts &amp; tech-related discussions.</p>"}, {"location": "about/", "title": "About", "text": "<p>My name is Jeremy Watkins. I'm a DevOps engineer.</p>"}, {"location": "blog/", "title": "Posts", "text": ""}, {"location": "blog/tags/", "title": "Tags", "text": ""}, {"location": "blog/tags/#tag:ai", "title": "ai", "text": "<ul> <li>            Running an LLM in a CI pipeline          </li> </ul>"}, {"location": "blog/tags/#tag:android", "title": "android", "text": "<ul> <li>            How to run PowerShell on Android          </li> </ul>"}, {"location": "blog/tags/#tag:cicd", "title": "ci/cd", "text": "<ul> <li>            Running an LLM in a CI pipeline          </li> <li>            Using `glab` in a CI pipeline with Gitlab self-hosted          </li> </ul>"}, {"location": "blog/tags/#tag:github", "title": "github", "text": "<ul> <li>            Running an LLM in a CI pipeline          </li> </ul>"}, {"location": "blog/tags/#tag:github-actions", "title": "github actions", "text": "<ul> <li>            Running an LLM in a CI pipeline          </li> </ul>"}, {"location": "blog/tags/#tag:gitlab", "title": "gitlab", "text": "<ul> <li>            Running an LLM in a CI pipeline          </li> <li>            Using `glab` in a CI pipeline with Gitlab self-hosted          </li> </ul>"}, {"location": "blog/tags/#tag:gitlab-ci", "title": "gitlab ci", "text": "<ul> <li>            Running an LLM in a CI pipeline          </li> <li>            Using `glab` in a CI pipeline with Gitlab self-hosted          </li> </ul>"}, {"location": "blog/tags/#tag:llm", "title": "llm", "text": "<ul> <li>            Running an LLM in a CI pipeline          </li> </ul>"}, {"location": "blog/tags/#tag:powershell", "title": "powershell", "text": "<ul> <li>            Getting assigned parameters in PowerShell          </li> <li>            How to run PowerShell on Android          </li> </ul>"}, {"location": "blog/2023/10/16/getting-assigned-parameters-in-powershell/", "title": "Getting assigned parameters in PowerShell", "text": "", "tags": ["powershell"]}, {"location": "blog/2023/10/16/getting-assigned-parameters-in-powershell/#getting-assigned-parameters-in-powershell", "title": "Getting assigned parameters in PowerShell", "text": "<p>Have you ever needed to pass a number of parameter values from one function into another function with some (but not all) of the same parameters? I've run into this particular pain point multiple times when writing functions in the past so I decided to find somewhat of a workaround.</p>", "tags": ["powershell"]}, {"location": "blog/2023/10/16/getting-assigned-parameters-in-powershell/#psboundparameters", "title": "<code>$PSBoundParameters</code>", "text": "<p>If you've spent some time writing PowerShell functions, you may be familiar with the <code>$PSBoundParameters</code> automatic variable. As Microsoft defines it, this variable</p> <p>Quote</p> <p>Contains a dictionary of the parameters that are passed to a script or function and their current values.</p> <p>Let's take a look at the below example. We'll write a simple function to return the contents of the <code>$PSBoundParameters</code> variable:</p> <pre><code>PS &gt; function Get-BoundParameters {\n    param (\n        $Parameter1,\n        $Parameter2,\n        $Parameter3\n    )\n    $PSBoundParameters\n}\nPS &gt; Get-BoundParameters -Parameter1 'this is param1' -Parameter3 'this is param3'\n\nKey        Value\n---        -----\nParameter1 this is param1\nParameter3 this is param3\n</code></pre> <p>As you can see, the <code>$PSBoundParameters</code> variable contains the parameters <code>Parameter1</code> and <code>Parameter3</code> and their contents, but does not contain <code>Parameter2</code> since I never used that parameter.</p> <p><code>$PSBoundParameters</code> comes in handy quite often for things like checking whether a certain parameter has been used:</p> <p></p><pre><code>PS &gt; function Get-Foods {\n    param (\n        [Parameter(Mandatory)]\n        $Fruits,\n        $Vegetables\n    )\n    $message = \"Here are the fruits\"\n    if ($PSBoundParameters.ContainsKey('Vegetables')){\n        $message += \" and vegetables\"\n    }\n    Write-Output $message\n    $Fruits + $Vegetables | ForEach-Object { \"- $_\" }\n}\nPS &gt; Get-Foods -Fruits apple, orange -Vegetables carrot, celery\nHere are the fruits and vegetables\n- apple\n- orange\n- carrot\n- celery\n</code></pre> In this example, we use <code>$PSBoundParameters</code> to check if it contains the key 'Vegetables' (meaning the <code>$Vegetables</code> parameter was used), and if it does we add the phrase \" and vegetables\" to the end of the return message.<p></p> <p>Now that we understand how <code>$PSBoundParameters</code> works, let's examine where it falls short.</p>", "tags": ["powershell"]}, {"location": "blog/2023/10/16/getting-assigned-parameters-in-powershell/#default-values", "title": "Default Values", "text": "<p>While <code>$PSBoundParameters</code> is great, the issue is that it only contains bound parameters (as the name suggests). This means that if a parameter has a default value the default value will never be included in the <code>$PSBoundParameters</code> dictionary.</p> <p>I've run into this situation many times when writing functions that pass certain parameter key/values to other commands, such as this example:</p> <p>Splatting</p> <p>In the <code>Get-UserItemsParent</code> function, we use a method called splatting when calling the <code>Get-UserItems</code> function. Splatting is a way to pass all parameters and values to a command as a dictionary instead of writing them out the long way. As an example, this: </p><pre><code>$parameters = @{\n   Name = 'Get-UserItems'\n   CommandType = 'Function'\n}\nGet-Command @parameters\n</code></pre> Is the same as this: <pre><code>Get-Command -Name 'Get-UserItems' -CommandType 'Function'\n</code></pre> Note that when splatting, the dictionary variable (in this case, <code>$parameters</code>) is written with an <code>@</code> sign instead of a <code>$</code>.<p></p> <p>If you're unfamiliar with splatting, I highly recommend reading the documentation to learn how you can take advantage of it in your scripts. I'll likely cover it and more ways to use it in a future post.</p> <p></p><pre><code>PS &gt; function Get-UserItems {\n    param (\n        $Name,\n        $Items\n    )\n    Write-Output \"$Name has the following items:\"\n    foreach ($Item in $Items){\n        \"- $Item\"\n    }\n}\nPS &gt; function Get-UserItemsParent {\n    param (\n        $Name = \"Bob\",\n        $Items\n    )\n    Get-UserItems @PSBoundParameters\n}\nPS &gt; Get-UserItemsParent -Items apple, orange, carrot, celery\n has the following items:\n- apple\n- orange\n- carrot\n- celery\n</code></pre> In the above example you'll notice that, while the fruits and vegetables in the <code>$Items</code> variable were passed on from the <code>Get-UserItemsParent</code> function to the <code>Get-UserItems</code> function via the <code>$PSBoundParameters</code> variable, the name Bob was not because \"Bob\" is the default value of the <code>$Name</code> parameter, but that parameter wasn't actually used by the user and as such is not part of <code>$PSBoundParameters</code>. This is the dilemma we're here to solve.<p></p>", "tags": ["powershell"]}, {"location": "blog/2023/10/16/getting-assigned-parameters-in-powershell/#getting-assigned-parameters", "title": "Getting Assigned Parameters", "text": "<p>What we're really looking for is akin to a <code>$PSAssignedParameters</code> variable, which in theory would contain assigned parameters (i.e. any parameters with values, whether from the user or from default values). Unfortunately, this isn't a real variable (at least not yet), but the below code snippet is a suitable workaround:</p> <p></p><pre><code>$PSAssignedParameters = @{}\n[System.Management.Automation.CommandMetaData]::new(\n    $MyInvocation.MyCommand\n).Parameters.GetEnumerator() | ForEach-Object {\n    $var = Get-Variable -Name $_.key -ValueOnly\n    if ($var){\n        $PSAssignedParameters[$_.key] = $var\n    }\n}\n</code></pre> Here's the breakdown of what we're doing: <pre><code>$PSAssignedParameters = @{}\n</code></pre> Here we create the <code>$PSAssignedParameters</code> hashtable to which we'll be adding the assigned parameters. <pre><code>[System.Management.Automation.CommandMetaData]::new($MyInvocation.MyCommand).Parameters.GetEnumerator()\n</code></pre> The <code>$MyInvocation</code> automatic variable and its <code>MyCommand</code> property represents the command that's currently running. Creating a new <code>[CommandMetaData]</code> object with the current command allows us to find all parameters available for the command by accessing the <code>Parameters</code> property. These parameters and information about the parameters are stored as a dictionary. Finally, <code>GetEnumerator()</code> allows us to iterate (\"loop\") through each of the parameters in the dictionary. <pre><code>$var = Get-Variable -Name $_.key -ValueOnly\n</code></pre> While looping through the parameters, we use the <code>Get-Variable</code> cmdlet to get the value of each parameter. <pre><code>if ($var){\n    $PSAssignedParameters[$_.key] = $var\n}\n</code></pre> If the parameter value (<code>$var</code>) is not empty, add it to the <code>$PSAssignedParameters</code> hashtable.<p></p> <p>And that's it! All we need are 7 lines to get all parameters with assigned values. In the next section I'll discuss how we can build this into a function for reusability.</p>", "tags": ["powershell"]}, {"location": "blog/2023/10/16/getting-assigned-parameters-in-powershell/#get-assignedparameter-function", "title": "<code>Get-AssignedParameter</code> Function", "text": "<p>We can use this <code>Get-AssignedParameter</code> function in our scripts as a replacement for the missing <code>$PSAssignedParameters</code> variable. </p><pre><code>function Get-AssignedParameter {\n    param (\n        [System.Management.Automation.InvocationInfo] $Invocation\n    )\n    $PSAssignedParameters = @{}\n    [System.Management.Automation.CommandMetaData]::new($Invocation.MyCommand).Parameters.GetEnumerator() | ForEach-Object {\n        $var = Get-Variable -Name $_.key -ValueOnly \n        if ($var){\n            $PSAssignedParameters[$_.key] = $var\n        }\n    }\n    $PSAssignedParameters.Clone()\n}\n</code></pre> The function can be used as-is, but let's see if we can improve it. It occurred to me that, while getting the assigned parameters is the goal, there are times when we may want to include or exclude specific parameters. Instead of repeatedly writing code in our scripts to remove unwanted keys from <code>$PSAssignedParameters</code>, let's add that functionality to the function.<p></p> <p></p><pre><code>function Get-AssignedParameter {\n    param (\n        [System.Management.Automation.InvocationInfo] $Invocation,\n        [string[]] $Include,\n        [string[]] $Exclude\n    )\n    $PSAssignedParameters = @{}\n    [System.Management.Automation.CommandMetaData]::new($Invocation.MyCommand).Parameters.GetEnumerator() | ForEach-Object {\n        if ($Include){\n            if ($_.key -in $Include){\n                $var = Get-Variable -Name $_.key -ValueOnly \n                if ($var){\n                    $PSAssignedParameters[$_.key] = $var\n                }\n            }\n        } elseif ($_.key -notin $Exclude){\n            $var = Get-Variable -Name $_.key -ValueOnly \n            if ($var){\n                $PSAssignedParameters[$_.key] = $var\n            }\n        }\n    }\n    $PSAssignedParameters.Clone()\n}\n</code></pre> Here I added the <code>$Include</code> and <code>$Exclude</code> parameters along with the corresponding logic: - If <code>$Include</code> is used, only return parameters in the <code>$Include</code> array - If <code>$Exclude</code> is used, only return parameters not in the <code>$Exclude</code> array<p></p> <p>While we'd hope nobody would try to use the <code>$Include</code> and <code>$Exclude</code> parameters at the same time, we'll want to follow PowerShell best practices and ensure our function can't be used in unintended ways. To accomplish this, we'll use Parameter Sets:</p> <p></p><pre><code>param (\n    [System.Management.Automation.InvocationInfo] $Invocation,\n    [Parameter(\n        ParameterSetName = 'Include'\n    )]\n    [string[]] $Include,\n    [Parameter(\n        ParameterSetName = 'Exclude'\n    )]\n    [string[]] $Exclude\n)\n</code></pre> By defining the <code>$Include</code> and <code>$Exclude</code> parameters as two different parameter sets, we allow PowerShell to do the work for us. As we can see when we run <code>Get-Help</code> against our function:<p></p> <p></p><pre><code>NAME\n    Get-AssignedParameter\n\nSYNTAX\n    Get-AssignedParameter [-Invocation &lt;InvocationInfo&gt;] [-Include &lt;string[]&gt;]\n\n    Get-AssignedParameter [-Invocation &lt;InvocationInfo&gt;] [-Exclude &lt;string[]&gt;]\n</code></pre> The two parameters are part of separate parameter sets and thus it's impossible to use both parameters at the same time.<p></p> <p>Finally, we'll add our <code>CmdletBinding</code> and some comments:</p> <p></p><pre><code>function Get-AssignedParameter {\n    &lt;#\n    .SYNOPSIS\n        Gets all parameters with assigned values.\n    .DESCRIPTION\n        This function returns any parameters from a provided invocation with assigned values--whether that be bound parameter values provided by the user, or default values.\n    .PARAMETER Invocation\n        The invocation from which to find the parameters. Typically this will be the automatic variable `$MyInvocation` within a function or script.\n    .PARAMETER Include\n        A string array of parameter names to include in the returned result. If this parameter is used, only parameters in this list will be returned.\n    .PARAMETER Exclude\n        A string array of parameter names to exclude from the returned result. If this parameter is used, any parameters in this list will not be returned.\n    .OUTPUTS\n        System.Collections.Hashtable\n    .LINK\n        https://DevOpsJeremy.github.io/documentation/powershell/Get-AssignedParameter.html\n    .LINK\n        Getting Assigned Parameters in PowerShell: https://devopsjeremy.github.io/powershell/2023/10/16/getting-assigned-parameters.html\n    .EXAMPLE\n        Get-AssignedParameter -Invocation $MyInvocation\n\n        Gets any assigned parameter key/values.\n    .EXAMPLE\n        Get-AssignedParameter -Invocation $MyInvocation -Include Name,Status\n\n        Gets the 'Name' and 'Status' parameter key/values if they are assigned.\n    .EXAMPLE\n        Get-AssignedParameter -Invocation $MyInvocation -Exclude ComputerName\n\n        Gets any parameter key/values which are assigned, excluding the 'ComputerName' parameter.\n    #&gt;\n    [CmdletBinding(\n        DefaultParameterSetName = 'Exclude'\n    )]\n    param (\n        [System.Management.Automation.InvocationInfo] $Invocation,\n        [Parameter(\n            ParameterSetName = 'Include'\n        )]\n        [string[]] $Include,\n        [Parameter(\n            ParameterSetName = 'Exclude'\n        )]\n        [string[]] $Exclude\n    )\n    $PSAssignedParameters = @{}\n    [System.Management.Automation.CommandMetaData]::new($Invocation.MyCommand).Parameters.GetEnumerator() | ForEach-Object {\n        if ($Include){\n            if ($_.key -in $Include){\n                $var = Get-Variable -Name $_.key -ValueOnly \n                if ($var){\n                    $PSAssignedParameters[$_.key] = $var\n                }\n            }\n        } elseif ($_.key -notin $Exclude){\n            $var = Get-Variable -Name $_.key -ValueOnly \n            if ($var){\n                $PSAssignedParameters[$_.key] = $var\n            }\n        }\n    }\n    $PSAssignedParameters.Clone()\n}\n</code></pre> <sup>Gist</sup><p></p> <p>And now our function is complete! Let's test it out using our function from earlier:</p> <pre><code>PS &gt; function Get-UserItems {\n    param (\n        $Name,\n        $Items\n    )\n    Write-Output \"$Name has the following items:\"\n    foreach ($Item in $Items){\n        \"- $Item\"\n    }\n}\nPS &gt; function Get-UserItemsParent {\n    param (\n        $Name = \"Bob\",\n        $Items\n    )\n    $PSAssignedParameters = Get-AssignedParameters -Invocation $MyInvocation\n    Get-UserItems @PSAssignedParameters\n}\nPS &gt; Get-UserItemsParent -Items apple, orange, carrot, celery\nBob has the following items:\n- apple\n- orange\n- carrot\n- celery\n</code></pre> <p>As we can see, not only did the <code>$Items</code> parameter get passed to the child function, but so did the default value of <code>$Name</code>.</p> <p>I hope you found this article helpful--be sure to follow the socials below to keep up with future posts.</p> <p>For further information, check out the documentation for this function.  Share on  Share on </p>", "tags": ["powershell"]}, {"location": "blog/2025/03/10/how-to-run-powershell-on-android/", "title": "How to run PowerShell on Android", "text": "", "tags": ["android", "powershell"]}, {"location": "blog/2025/03/10/how-to-run-powershell-on-android/#overview", "title": "Overview", "text": "<p>A recent update to Android OS enables running a Debian Linux distribution on an Android phone. With a workable Linux distribution available on mobile, we now have the ability to install and run PowerShell in this Linux environment.</p>", "tags": ["android", "powershell"]}, {"location": "blog/2025/03/10/how-to-run-powershell-on-android/#prerequisites", "title": "Prerequisites", "text": "<p>Google Pixel: The Linux terminal feature is still very new so Google Pixels are currently the only phones receiving the update. As with any other Android feature--non-Pixel Android phones will likely be receiving the update in the coming months.</p> <p>March 2025 software update: The Linux terminal was included in the March 2025 Pixel update, so make sure to install the latest software update.</p>", "tags": ["android", "powershell"]}, {"location": "blog/2025/03/10/how-to-run-powershell-on-android/#procedures", "title": "Procedures", "text": "", "tags": ["android", "powershell"]}, {"location": "blog/2025/03/10/how-to-run-powershell-on-android/#enable-the-linux-terminal", "title": "Enable the Linux terminal", "text": "<p>The Linux terminal can be enabled from Developer options. If you don't have Developer options enabled, follow these procedures to enable it.</p> <p>Once enabled, navigate to Settings &gt; System &gt; Developer options. If you've received the latest update, you'll see the Linux development environment option under the Debugging section. Under this option, enable (Experimental) Run Linux terminal on Android.</p> <p></p> <p></p>", "tags": ["android", "powershell"]}, {"location": "blog/2025/03/10/how-to-run-powershell-on-android/#install-linux-terminal", "title": "Install Linux terminal", "text": "<p>Once the Linux development environment is enabled, open your app drawer and open the Terminal app--you'll see \"Install Linux terminal\". In the corner of the screen, click Install. The install will take a few minutes.</p> <p></p>", "tags": ["android", "powershell"]}, {"location": "blog/2025/03/10/how-to-run-powershell-on-android/#install-powershell", "title": "Install PowerShell", "text": "<p>The Google Pixel runs on an ARM64-based processor, so we'll follow these procedures for installing PowerShell as a binary archive, as opposed to from a package manager like APT. Simply copy the code from the procedures and paste into the terminal.</p> <p>Important</p> <p>The example from the above procedures specifically references the <code>x64</code> edition of the PowerShell binary (e.g.: <code>powershell-7.5.0-linux-x64.tar.gz</code>). The correct binary for <code>arm64</code> processors is <code>powershell-7.5.0-linux-arm64.tar.gz</code>. The code below are the same procedures as provided by Microsoft, but for <code>arm64</code> instead of <code>x64</code>, which will be compatible with Google Pixel:</p> <pre><code>curl -L -o /tmp/powershell.tar.gz https://github.com/PowerShell/PowerShell/releases/download/v7.5.0/powershell-7.5.0-linux-arm64.tar.gz\nsudo mkdir -p /opt/microsoft/powershell/7\nsudo tar zxf /tmp/powershell.tar.gz -C /opt/microsoft/powershell/7\nsudo chmod +x /opt/microsoft/powershell/7/pwsh\nsudo ln -s /opt/microsoft/powershell/7/pwsh /usr/bin/pwsh\n</code></pre> <p>That's all you need! Simply enter <code>pwsh</code> to run PowerShell on your Android.</p> <p></p>", "tags": ["android", "powershell"]}, {"location": "blog/2025/03/10/how-to-run-powershell-on-android/#set-powershell-as-the-default-shell-optional", "title": "Set PowerShell as the default shell (Optional)", "text": "<p>Bash is the default shell for this terminal, but you can change your default shell by running <code>chsh -s &lt;shell binary&gt; &lt;username&gt;</code>. The below example will set PowerShell as the default shell for our user (<code>droid</code>):</p> <pre><code>sudo chsh -s /usr/bin/pwsh droid\n</code></pre>", "tags": ["android", "powershell"]}, {"location": "blog/2025/03/10/how-to-run-powershell-on-android/#copypaste", "title": "Copy/paste", "text": "<p>To skip all the explanitory information and simply install PowerShell, copy the following code into your Linux terminal:</p> <pre><code>curl -L -o /tmp/powershell.tar.gz https://github.com/PowerShell/PowerShell/releases/download/v7.5.0/powershell-7.5.0-linux-arm64.tar.gz\n\nsudo mkdir -p /opt/microsoft/powershell/7\n\nsudo tar zxf /tmp/powershell.tar.gz -C /opt/microsoft/powershell/7\n\nsudo chmod +x /opt/microsoft/powershell/7/pwsh\n\nsudo ln -s /opt/microsoft/powershell/7/pwsh /usr/bin/pwsh\n\nsudo chsh -s /usr/bin/pwsh droid\n\npwsh\n</code></pre>", "tags": ["android", "powershell"]}, {"location": "blog/2025/03/10/how-to-run-powershell-on-android/#troubleshooting", "title": "Troubleshooting", "text": "<p>The Linux feature is still in the experimental stage, and as such it can be pretty glitchy. Below are some tips to resolve any issues you may run into.</p> <p>Enable notifications</p> <p>The terminal displays a persistant notification while it's running.</p> <p></p> <p>As a result--when notifications are disabled--the app tends to act up. Ensuring notifications are enabled avoids some of these issues.</p> <p></p> <p>Pause the app</p> <p>If the app is acting erratically or not responding, I've found that pausing the app can resolve some issues. Press and hold on the app icon and select Pause app. Then open the app again and when prompted, select Unpause app.</p> <p>Recovery</p> <p>If the app is still not acting properly or keeps crashing, you can reset the app's data by clicking the settings \"gear\" icon in the upper right corner, navigate to Recovery &gt; Reset to initial version, and click Reset.</p> <p></p> <p>Warning</p> <p>This will delete all data related to the Linux environment on the phone.</p> <p>Re-enable the Linux environment</p> <p>There are times when the app is acting up so much that Recovery isn't even an option. In this case, simply disabling, then re-enabling the Linux environment via Developer options (as described above) will reset the app.</p> <p>Warning</p> <p>As with the Recovery option, this will also delete all data related to the Linux environment on the phone.</p> <p> Share on  Share on </p>", "tags": ["android", "powershell"]}, {"location": "blog/2025/02/05/running-an-llm-in-a-ci-pipeline/", "title": "Running an LLM in a CI pipeline", "text": "", "tags": ["github", "github actions", "gitlab", "gitlab ci", "llm", "ai", "ci/cd"]}, {"location": "blog/2025/02/05/running-an-llm-in-a-ci-pipeline/#running-an-llm-in-a-ci-pipeline", "title": "Running an LLM in a CI pipeline", "text": "", "tags": ["github", "github actions", "gitlab", "gitlab ci", "llm", "ai", "ci/cd"]}, {"location": "blog/2025/02/05/running-an-llm-in-a-ci-pipeline/#overview", "title": "Overview", "text": "<p>With the recent explosion of AI and large language models (LLM), I've been brainstorming how to take advantage of AI capabilities within a CI/CD pipeline.</p> <p>Most of the major AI providers have a REST API, so I could of course easily use that in a CI pipeline, but there are many situations where this isn't an option:</p> <ul> <li>Cost: As many \"AI wrapper\" companies quickly discovered, these APIs are expensive. And running queries in a CI pipeline that could run potentially hundreds of times per day adds up quickly.</li> <li>Security: Many organizations handling sensitive or proprietary data don't want their information sent to a third party like OpenAI or Google.</li> </ul> <p>To solve these issues, I wanted to see if it's possible to run an LLM locally in a CI job, to which I can send queries without worrying about API cost or revealing sensitive data.</p>", "tags": ["github", "github actions", "gitlab", "gitlab ci", "llm", "ai", "ci/cd"]}, {"location": "blog/2025/02/05/running-an-llm-in-a-ci-pipeline/#how-its-done", "title": "How it's done", "text": "", "tags": ["github", "github actions", "gitlab", "gitlab ci", "llm", "ai", "ci/cd"]}, {"location": "blog/2025/02/05/running-an-llm-in-a-ci-pipeline/#tools", "title": "Tools", "text": "<p>All the tools I'm using in this article are free to use.</p> Name Description Ollama A free, open-source tool for running LLMs locally Gitlab CI A free CI/CD pipeline system developed by Gitlab for running automated jobs in the same environment as your git repository GitHub Actions Same as Gitlab CI, but provided by GitHub <p>Note</p> <p>In this article I won't be getting too deep into exactly what Ollama is and how it works. To learn more about it, check out their GitHub.</p>", "tags": ["github", "github actions", "gitlab", "gitlab ci", "llm", "ai", "ci/cd"]}, {"location": "blog/2025/02/05/running-an-llm-in-a-ci-pipeline/#setup", "title": "Setup", "text": "<p>To start, you'll need either a GitHub or Gitlab account and you'll need to create your first repository<sup>1</sup><sup>2</sup>. Once that's done, create a basic CI/CD pipeline--we'll name it <code>ci</code>:</p> GitHub Actions - <code>.github/workflows/ci.yml</code>Gitlab CI - <code>.gitlab-ci.yml</code> <pre><code>name: ci\non:\n  push:\n</code></pre> <pre><code>workflow:\n  name: ci\n</code></pre> <p>This creates a basic structure for a pipeline that runs on all commits. To limit the pipeline to only run on a certain branch, modify GitHub's <code>on.push</code> option, or Gitlab's <code>workflow:rules</code>. For example:</p> GitHub ActionsGitlab CI <pre><code>name: ci\non:\n  push:\n    branches:\n      - main\n</code></pre> <pre><code>workflow:\n  name: ci\n  rules:\n    - if: $CI_COMMIT_BRANCH == 'main'\n</code></pre>", "tags": ["github", "github actions", "gitlab", "gitlab ci", "llm", "ai", "ci/cd"]}, {"location": "blog/2025/02/05/running-an-llm-in-a-ci-pipeline/#run-an-llm-in-a-job", "title": "Run an LLM in a job", "text": "<p>The <code>ollama</code> CLI is great for running a local, interactive chat session in your terminal. But for a non-interactive, automated CI job it's best to interface with the Ollama API. To do this, we need to first define our <code>ollama</code> job and run Ollama as a service<sup>3</sup><sup>4</sup> accessible by our job.</p> GitHub ActionsGitlab CI <pre><code>jobs:\n  ollama:\n    runs-on: ubuntu-latest\n    services:\n      ollama: ollama/ollama\n</code></pre> <pre><code>ollama:\n  services:\n    - image: ollama/ollama\n      alias: ollama\n</code></pre> <p>Next we'll add our script. When we request a response from the LLM we'll need to specify a large language model to generate that response. These models can be found in Ollama's library. Any model will work, but keep in mind that models with more parameters--while providing much better responses--are much larger in size. The 671 billion parameter version of <code>deepseek-r1</code>, for example, is 404GB in size. As such, it's ideal to use smaller models such as Meta's <code>llama3.2</code>.</p> <p>Prior to generating a response, we'll first need to pull the model we want using Ollama's <code>pull</code> API. Then we generate the response with the <code>generate</code> API. Any Docker image will work for this job as long as it has the ability to send web requests with tools like <code>wget</code> or <code>curl</code>. For this example we'll be using <code>curl</code> with the <code>alpine/curl</code> image.</p> GitHub ActionsGitlab CI <pre><code>container: alpine/curl\nsteps:\n  - name: Generate response\n    run: |\n      curl -sS -X POST -d '{\"model\":\"llama3.2\",\"stream\":false}' ollama:11434/api/pull\n      curl -sS -X POST -d '{\"model\":\"llama3.2\",\"stream\":false,\"prompt\":\"Hello world\"}' ollama:11434/api/generate\n</code></pre> <pre><code>image: alpine/curl\nscript: |\n  curl -sS -X POST -d '{\"model\":\"llama3.2\",\"stream\":false}' ollama:11434/api/pull\n  curl -sS -X POST -d '{\"model\":\"llama3.2\",\"stream\":false,\"prompt\":\"Hello world\"}' ollama:11434/api/generate\n</code></pre> Note <p>Ideally, the <code>pull</code> and <code>generate</code> operations would run in separate steps. GitHub uses the <code>steps</code> functionality for this, however, the comparable functionality in Gitlab (<code>run</code>) is still in the experimental stage. For simplicity for the sake of this article, we'll be running the commands in a single script in both GitHub and Gitlab.</p> <p>To accomplish the same in separate steps would look like this:</p> GitHub ActionsGitlab CI <pre><code>container: alpine/curl\nsteps:\n  - name: Pull model\n    run: curl -sS -X POST -d '{\"model\":\"llama3.2\",\"stream\":false}' ollama:11434/api/pull\n\n  - name: Generate response\n    run: curl -sS -X POST -d '{\"model\":\"llama3.2\",\"stream\":false,\"prompt\":\"Hello world\"}' ollama:11434/api/generate\n</code></pre> <pre><code>image: alpine/curl\nrun:\n  - name: Pull model\n    script: curl -sS -X POST -d '{\"model\":\"llama3.2\",\"stream\":false}' ollama:11434/api/pull\n\n  - name: Generate response\n    script: curl -sS -X POST -d '{\"model\":\"llama3.2\",\"stream\":false,\"prompt\":\"Hello world\"}' ollama:11434/api/generate\n</code></pre> <p>That's all we need--let's see the response:</p> <pre><code>&gt; curl -sS -X POST -d '{\"model\":\"llama3.2\",\"stream\":false}' ollama:11434/api/pull\n{\"status\":\"success\"}\n&gt; curl -sS -X POST -d '{\"model\":\"llama3.2\",\"stream\":false,\"prompt\":\"Hello world\"}' ollama:11434/api/generate\n{\"model\":\"llama3.2\",\"created_at\":\"2025-02-06T18:46:52.362892453Z\",\"response\":\"Hello! It's nice to meet you. Is there something I can help you with or would you like to chat?\",\"done\":true,\"done_reason\":\"stop\",\"context\":[128004,9125,128007,276,39766,3303,33025,2696,22,8790,220,2366,11,271,128009,128006,882,128007,271,9906,1917,128009,128006,78191,128007,271,9906,0,1102,596,6555,311,3449,499,13,2209,1070,2555,358,649,1520,499,449,477,1053,499,1093,311,6369,30],\"total_duration\":9728821911,\"load_duration\":2319403269,\"prompt_eval_count\":27,\"prompt_eval_duration\":3406000000,\"eval_count\":25,\"eval_duration\":4001000000}\n</code></pre>", "tags": ["github", "github actions", "gitlab", "gitlab ci", "llm", "ai", "ci/cd"]}, {"location": "blog/2025/02/05/running-an-llm-in-a-ci-pipeline/#parse-the-output", "title": "Parse the output", "text": "<p>This is great, but the JSON output is a bit verbose. We can simplify the response and make it a bit more readable using the <code>jq</code> command.</p> GitHub ActionsGitlab CI <pre><code>steps:\n  - name: Install jq\n    run: apk add jq\n  - name: Generate response\n    run: |\n      curl -sS -X POST -d '{\"model\":\"llama3.2\",\"stream\":false}' ollama:11434/api/pull | jq -r .status\n      curl -sS -X POST -d '{\"model\":\"llama3.2\",\"stream\":false,\"prompt\":\"Hello world\"}' ollama:11434/api/generate | jq -r .response\n</code></pre> <pre><code>before_script: apk add jq\nscript: |\n  curl -sS -X POST -d '{\"model\":\"llama3.2\",\"stream\":false}' ollama:11434/api/pull | jq -r .status\n  curl -sS -X POST -d '{\"model\":\"llama3.2\",\"stream\":false,\"prompt\":\"Hello world\"}' ollama:11434/api/generate | jq -r .response\n</code></pre> <p>This looks much better:</p> <pre><code>&gt; curl -sS -X POST -d '{\"model\":\"llama3.2\",\"stream\":false}' ollama:11434/api/pull | jq -r .status\nsuccess\n&gt; curl -sS -X POST -d '{\"model\":\"llama3.2\",\"stream\":false,\"prompt\":\"Hello world\"}' ollama:11434/api/generate | jq -r .response\nHello! It's nice to meet you. Is there something I can help you with or would you like to chat?\n</code></pre>", "tags": ["github", "github actions", "gitlab", "gitlab ci", "llm", "ai", "ci/cd"]}, {"location": "blog/2025/02/05/running-an-llm-in-a-ci-pipeline/#put-it-all-together", "title": "Put it all together", "text": "<p>This is our final product:</p> GitHub Actions - <code>.github/workflows/ci.yml</code>Gitlab CI - <code>.gitlab-ci.yml</code> <pre><code>name: ci\non:\n  push:\n\njobs:\n  ollama:\n    runs-on: ubuntu-latest\n    services:\n      ollama: ollama/ollama\n    container: alpine/curl\n    steps:\n      - name: Install jq\n        run: apk add jq\n      - name: Generate response\n        run: |\n          curl -sS -X POST -d '{\"model\":\"llama3.2\",\"stream\":false}' ollama:11434/api/pull | jq -r .status\n          curl -sS -X POST -d '{\"model\":\"llama3.2\",\"stream\":false,\"prompt\":\"Hello world\"}' ollama:11434/api/generate | jq -r .response\n</code></pre> <pre><code>workflow:\n  name: ci\n\nollama:\n  image: alpine/curl\n  services:\n    - name: ollama/ollama\n      alias: ollama\n  before_script: apk add jq\n  script: |\n    curl -sS -X POST -d '{\"model\":\"llama3.2\",\"stream\":false}' ollama:11434/api/pull | jq -r .status\n    curl -sS -X POST -d '{\"model\":\"llama3.2\",\"stream\":false,\"prompt\":\"Hello world\"}' ollama:11434/api/generate | jq -r .response\n</code></pre>", "tags": ["github", "github actions", "gitlab", "gitlab ci", "llm", "ai", "ci/cd"]}, {"location": "blog/2025/02/05/running-an-llm-in-a-ci-pipeline/#summary", "title": "Summary", "text": "<p>With just a few lines of code, we're able to run an Ollama server, pull down a large language model, and generate responses--all completely local to our CI job. We can now use this capability to generate release notes, automate code review, write documentation--the possibilities are endless.</p> <ol> <li> <p>Creating a GitHub repository \u21a9</p> </li> <li> <p>Creating a Gitlab project \u21a9</p> </li> <li> <p>GitHub actions - <code>services</code> \u21a9</p> </li> <li> <p>Gitlab CI - <code>services</code> Share on  Share on  \u21a9</p> </li> </ol>", "tags": ["github", "github actions", "gitlab", "gitlab ci", "llm", "ai", "ci/cd"]}, {"location": "documentation/", "title": "Index", "text": ""}, {"location": "drafts/Using%20glab%20in%20a%20CI%20pipeline/", "title": "Using `glab` in a CI pipeline with Gitlab self-hosted", "text": "", "tags": ["gitlab", "gitlab ci", "ci/cd"]}, {"location": "drafts/Using%20glab%20in%20a%20CI%20pipeline/#using-glab-in-a-ci-pipeline-with-gitlab-self-hosted", "title": "Using <code>glab</code> in a CI pipeline with Gitlab self-hosted", "text": "", "tags": ["gitlab", "gitlab ci", "ci/cd"]}, {"location": "drafts/Using%20glab%20in%20a%20CI%20pipeline/#overview", "title": "Overview", "text": "<p>The <code>glab</code> tool is Gitlab's new (ish) command-line tool for interfacing with the Gitlab API. This article describes how to use <code>glab</code> in a Gitlab CI/CD pipeline--particularly if using a self-hosted Gitlab instance.</p>", "tags": ["gitlab", "gitlab ci", "ci/cd"]}, {"location": "drafts/Using%20glab%20in%20a%20CI%20pipeline/#running-glab", "title": "Running <code>glab</code>", "text": "", "tags": ["gitlab", "gitlab ci", "ci/cd"]}, {"location": "drafts/Using%20glab%20in%20a%20CI%20pipeline/#configuration", "title": "Configuration", "text": "<p>Configurations for the <code>glab</code> CLI can be stored in <code>~/.gitlab/glab-cli/config.yml</code>, or an alternate directory defined by <code>$GLAB_CONFIG_DIR</code><sup>1</sup>. Alternatively, many of these configurations can be set as environment variables<sup>2</sup>. The main configurations we'll need to set for a self-hosted Gitlab instance are:</p> Configuration Variable Description <code>hosts.&lt;hostname&gt;.api_host</code> <code>GITLAB_API_HOST</code> Specify the host where the API endpoint is found. Useful when there are separate (sub)domains or hosts for Git and the API endpoint. <code>host</code> <code>GITLAB_HOST</code> Alias of GITLAB_URI. <code>GITLAB_REPO</code> Default GitLab repository used for commands accepting the --repo option. Only used if no --repo option is given. <code>hosts.&lt;hostname&gt;.token</code> <code>GITLAB_TOKEN</code> an authentication token for API requests. Setting this avoids being prompted to authenticate and overrides any previously stored credentials. Can be set in the config with glab config set token xxxxxx. <code>GITLAB_URI</code> Alias of GITLAB_HOST. <ol> <li> <p><code>glab</code> config \u21a9</p> </li> <li> <p><code>glab</code> environment variables \u21a9</p> </li> </ol>", "tags": ["gitlab", "gitlab ci", "ci/cd"]}, {"location": "drafts/ci-comparison/", "title": "Ci comparison", "text": "<p>Compare Gitlab CI vs Github Actions vs OpenShift pipelines</p> <p>Objectives:</p> <ul> <li>tekton: full script capabilities vs gitlab only bash</li> </ul>"}, {"location": "drafts/rest-api/", "title": "Rest api", "text": "<p>How to use a rest api</p> <p>PowerShell bash python ansible</p>"}, {"location": "other/", "title": "Other", "text": "<p>Non-tech-related things that interest me.</p>"}, {"location": "other/Photography/", "title": "Photography", "text": ""}, {"location": "other/Photography/#tags", "title": "Tags", "text": ""}, {"location": "other/Photography/#tag:cabrillo-national-monument", "title": "Cabrillo National Monument", "text": "<ul> <li>            lighthouse          </li> </ul>"}, {"location": "other/Photography/#tag:church", "title": "Church", "text": "<ul> <li>            chapel          </li> </ul>"}, {"location": "other/Photography/#tag:felicity", "title": "Felicity", "text": "<ul> <li>            chapel          </li> </ul>"}, {"location": "other/Photography/#tag:germany", "title": "Germany", "text": "<ul> <li>            lake          </li> </ul>"}, {"location": "other/Photography/#tag:google-pixel", "title": "Google Pixel", "text": "<ul> <li>            lake          </li> <li>            lighthouse          </li> <li>            squirrel          </li> </ul>"}, {"location": "other/Photography/#tag:k\u00f6nigsee", "title": "K\u00f6nigsee", "text": "<ul> <li>            lake          </li> </ul>"}, {"location": "other/Photography/#tag:la-jolla", "title": "La Jolla", "text": "<ul> <li>            squirrel          </li> </ul>"}, {"location": "other/Photography/#tag:samsung-galaxy-note", "title": "Samsung Galaxy Note", "text": "<ul> <li>            chapel          </li> </ul>"}, {"location": "other/Photography/#tag:san-diego", "title": "San Diego", "text": "<ul> <li>            lighthouse          </li> <li>            squirrel          </li> </ul>"}, {"location": "other/Photography/#tag:chapel", "title": "chapel", "text": "<ul> <li>            chapel          </li> </ul>"}, {"location": "other/Photography/#tag:lake", "title": "lake", "text": "<ul> <li>            lake          </li> </ul>"}, {"location": "other/Photography/#tag:lighthouse", "title": "lighthouse", "text": "<ul> <li>            lighthouse          </li> </ul>"}, {"location": "other/Photography/#tag:squirrel", "title": "squirrel", "text": "<ul> <li>            squirrel          </li> </ul>"}, {"location": "other/Photography/chapel/", "title": "chapel", "text": "", "tags": ["chapel", "Samsung Galaxy Note", "Felicity", "Church"]}, {"location": "other/Photography/lake/", "title": "lake", "text": "", "tags": ["lake", "Google Pixel", "Germany", "K\u00f6nigsee"]}, {"location": "other/Photography/lighthouse/", "title": "lighthouse", "text": "", "tags": ["lighthouse", "Google Pixel", "San Diego", "Cabrillo National Monument"]}, {"location": "other/Photography/squirrel/", "title": "squirrel", "text": "", "tags": ["squirrel", "Google Pixel", "La Jolla", "San Diego"]}, {"location": "blog/archive/2025/", "title": "2025", "text": ""}, {"location": "blog/archive/2025/#2025", "title": "2025", "text": ""}, {"location": "blog/archive/2023/", "title": "2023", "text": ""}, {"location": "blog/archive/2023/#2023", "title": "2023", "text": ""}]}